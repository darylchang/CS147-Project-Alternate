// Generated by CoffeeScript 1.6.3
(function() {
  jQuery(function() {
    var ajaxmsg, closeSuccessStatus, htmlEncode, initializeTimers, mp_ping, numberSuffix, objCookie, padZeros, pagination, semiFix, showLoginError, successStatus, trim, uploadDialog;
    pagination = function(total, url_prefix, current_page, count, pages) {
      var eachpage, last, last_page, onBegining, onEnd, output, start, _fn, _i;
      if (current_page == null) {
        current_page = 1;
      }
      if (count == null) {
        count = 10;
      }
      if (pages == null) {
        pages = 10;
      }
      current_page = parseInt(current_page);
      output = '<div class="pagination"><ul>';
      if (((Math.floor(pages / 2)) >= current_page && current_page >= 1)) {
        start = 1;
      } else {
        start = current_page - (Math.floor(pages / 2));
      }
      last_page = Math.ceil(total / count);
      if (last_page === 0) {
        last_page = 1;
      }
      if (last_page >= (start + (pages - 1))) {
        last = start + (pages - 1);
      } else {
        last = last_page;
      }
      if ((last - start) < (pages - 1)) {
        start = last - (pages - 1);
        if (start < 1) {
          start = 1;
        }
      }
      if (last === start || _.isNaN(last)) {
        return '';
      }
      if (current_page === 1) {
        onBegining = true;
      } else {
        onBegining = false;
      }
      if (current_page === last_page) {
        onEnd = true;
      } else {
        onEnd = false;
      }
      if (onBegining) {
        output += '<li class="disabled" data-page="1"><a>&larr;</a></li>';
      } else {
        output += '<li><a class="scroll-to-top js-page" data-page="1" href="' + url_prefix + '1">&larr;</a></li>';
      }
      _fn = function(eachpage) {
        if (eachpage !== current_page) {
          return output += '<li><a class="scroll-to-top js-page" data-page="' + eachpage + '" href="' + url_prefix + eachpage + '">' + eachpage + '</a></li>';
        } else {
          return output += '<li class="active"><a class="scroll-to-top js-page" data-page="' + eachpage + '" href="' + url_prefix + eachpage + '">' + eachpage + '</a></li>';
        }
      };
      for (eachpage = _i = start; start <= last ? _i <= last : _i >= last; eachpage = start <= last ? ++_i : --_i) {
        _fn(eachpage);
      }
      if (onEnd) {
        output += '<li class="disabled"><a>&rarr;</a></li>';
      } else {
        output += '<li><a class="scroll-to-top js-page" data-page="' + last_page + '" href="' + url_prefix + last_page + '">&rarr;</a></li>';
      }
      output += '</ul></div>';
      return output;
    };
    trim = function(text) {
      return text.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
    };
    ajaxmsg = function(msg, loader, autohide, timeout) {
      var $ajaxmsg;
      if (loader == null) {
        loader = true;
      }
      if (autohide == null) {
        autohide = false;
      }
      if (timeout == null) {
        timeout = 0.5;
      }
      $ajaxmsg = $("#ajax-msg");
      if ($ajaxmsg.length === 0) {
        $("body").append('<div id="ajax-msg"><span class="ajax-loader"></span><span class="ajax-msg"></span></div>');
        $ajaxmsg = $("#ajax-msg");
      } else {
        $ajaxmsg.show();
      }
      if (loader) {
        $ajaxmsg.find('.ajax-loader').addClass('ajax-loading');
      } else {
        $ajaxmsg.find('.ajax-loader').removeClass('ajax-loading');
      }
      $ajaxmsg.find('.ajax-msg').html(msg);
      $ajaxmsg.css('margin-left', -1 * ($ajaxmsg.width() / 2));
      if (autohide) {
        return setTimeout("$('#ajax-msg').hide()", timeout * 1000);
      }
    };
    initializeTimers = function(text) {
      var timer, _i, _len, _ref, _ref1, _results;
      _ref = $(".countdowntimer");
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        timer = _ref[_i];
        if (((_ref1 = $(timer).attr("data-start-time")) != null ? _ref1 : '0000-00-00 00:00:00') && $(timer).attr("data-start-time") !== " " && $(timer).attr("data-start-time") !== "0000-00-00 00:00:00") {
          _results.push((function(timer) {
            var t;
            t = $(timer).attr("data-start-time").split(/[- :]/);
            return $(timer).countdown({
              until: new Date(t[0], t[1] - 1, t[2], t[3], t[4], t[5]),
              layout: $(timer).attr("data-text") + '{dn} {dl} {hnn}:{mnn}:{snn}',
              timezone: +0.0,
              alwaysExpire: true,
              onExpiry: function() {
                $(this).html($(this).attr("data-done-text"));
                return this;
              }
            });
          })(timer));
        }
      }
      return _results;
    };
    semiFix = function(selector, wrapselector) {
      return $(window).scroll(function() {
        var offset, scroller_object;
        if ($(wrapselector).length > 0) {
          offset = $(wrapselector).offset().top - 40;
          scroller_object = $(selector);
          if (document.documentElement.scrollTop >= offset || window.pageYOffset >= offset) {
            if ($.browser.msie && $.browser.version === "6.0") {
              return scroller_object.css("top", (document.documentElement.scrollTop + 15) + "px");
            } else {
              return scroller_object.css({
                top: "40px"
              });
            }
          } else if (document.documentElement.scrollTop < offset || window.pageYOffset < offset) {
            return scroller_object.css({
              position: "absolute",
              top: "0"
            });
          }
        }
      });
    };
    uploadDialog = function(options) {
      var body_message, disable_weburl, header_message, template, that;
      if (!(options && options.upload_url)) {
        return;
      } else {
        this.options = options;
      }
      this.$upload_dialog = $("#upload-dialog");
      if (this.$upload_dialog.length === 0) {
        $("body").append('<div id="upload-dialog"><div>');
        this.$upload_dialog = $("#upload-dialog");
      } else {
        this.$upload_dialog.empty();
      }
      template = _.template($("#upload-dialog-template").html());
      header_message = (options.header_message ? options.header_message : "File upload dialog");
      body_message = (options.body_message ? options.body_message : "");
      disable_weburl = (options.disable_weburl === true ? true : false);
      this.$upload_dialog.html(template({
        header_message: header_message,
        body_message: body_message,
        disable_weburl: disable_weburl
      }));
      this.$upload_dialog.find("#fileupload-modal").modal();
      that = this;
      this.$upload_dialog.find("a[data-toggle='tab']").bind("click", function(e) {
        var tabSelector;
        tabSelector = $(e.currentTarget).parent().siblings().find("a").attr("href");
        return $(that.$upload_dialog).find(tabSelector).find("input").val("");
      });
      this.$upload_dialog.find("input.uploadurl").unbind();
      this.$upload_dialog.find("input.uploadurl").bind("keypress", function(e) {
        var code;
        code = e.keyCode ? e.keyCode : e.which;
        if (code === 13) {
          e.preventDefault();
          return that.$upload_dialog.find("a.upload").click();
        }
      });
      return this.$upload_dialog.find("a.upload").bind("click", function(e) {
        var data;
        if ($(e.currentTarget).hasClass("disabled")) {
          return;
        }
        that.$upload_dialog.find('.errorp').hide();
        that.$upload_dialog.find('.successp').hide();
        $(e.currentTarget).addClass("disabled");
        $(e.currentTarget).button("loading");
        data = (that.options.data ? that.options.data : {});
        return $.ajax(that.options.upload_url, {
          data: data,
          files: $(":file", that.$upload_dialog),
          iframe: true,
          processData: true
        }).complete(function(data) {
          var resp;
          resp = $.parseJSON(data.responseText);
          $(e.currentTarget).removeClass("disabled");
          $(e.currentTarget).button("reset");
          if (resp.status) {
            if (that.options.success_message !== void 0) {
              that.$upload_dialog.find('.successp').html(that.options.success_message);
              that.$upload_dialog.find('.successp').show();
              that.$upload_dialog.find('form').hide();
              $(e.currentTarget).hide();
            } else {
              that.$upload_dialog.find("#fileupload-modal").modal('hide');
            }
            if (that.options.parent_model && that.options.parent_view) {
              that.options.parent_model.render_once = false;
              return that.options.parent_model.fetch({
                success: function() {
                  var activeTab;
                  activeTab = that.options.parent_view.activeTab;
                  if (activeTab) {
                    that.options.parent_view.activeTab = 3;
                    that.options.parent_view.render();
                    that.options.parent_view.activeTab = activeTab;
                    return that.options.parent_view.renderResume(true);
                  }
                }
              });
            }
          } else {
            that.$upload_dialog.find('.errorp').html(resp.message);
            return that.$upload_dialog.find('.errorp').show();
          }
        });
      });
    };
    padZeros = function(num, size) {
      var s;
      s = "0000000000" + num;
      return s.substr(s.length - size);
    };
    mp_ping = function() {
      var data;
      if (app.mp_ping_interval !== void 0) {
        app.mp_ping_interval += 2;
      } else {
        app.mp_ping_interval = 0;
      }
      app.loggedin || (app.loggedin = false);
      data = {
        interval: app.mp_ping_interval,
        loggedin: app.loggedin
      };
      if (mpq !== void 0 && mpq.track !== void 0 && app.mp_ping_interval % 10 === 0) {
        return mpq.track("Ping", data);
      }
    };
    numberSuffix = function(number) {
      var mod10;
      if (number > 0) {
        mod10 = number % 10;
        if (mod10 === 1 && number !== 11) {
          return number + 'st';
        } else if (mod10 === 2 && number !== 12) {
          return number + 'nd';
        } else if (mod10 === 3 && number !== 13) {
          return number + 'rd';
        } else {
          return number + 'th';
        }
      } else {
        return number;
      }
    };
    showLoginError = function(prefix) {
      if (_.clone(prefix) !== 'phackerprofile' || _.clone(prefix) !== 'phackerboard') {
        return $('body').append('<div style="position: absolute; top: 30%; left: 40%; background-color: #fff; border-radius: 15px; padding: 20px; border: 3px #ccc solid;"><p>You must <a href="user/login">login</a> before you can view this page</p></div>');
      }
    };
    successStatus = function() {
      var height, styles, that;
      this.$success_status = $("#success-status-wrap");
      if (this.$success_status.length === 0) {
        $("body").append('<div id="success-status-wrap"><div>');
        this.$success_status = $("#success-status-wrap");
      } else {
        this.$success_status.empty();
      }
      height = 50;
      styles = {
        "position": "fixed",
        "top": "0px",
        "left": "0px",
        "height": height + "px",
        "text-align": "center",
        "width": "100%",
        "z-index": "9999",
        "background": "#333 url('public/images/success-bar-bg.jpg')"
      };
      that = this;
      _.each(styles, function(v, k) {
        return that.$success_status.css(k, v);
      });
      $('body').addClass('home-status-padding');
      $('body div.navbar.navbar-fixed-top').addClass('navbar-status-padding');
      this.$success_status.hide();
      this.$success_status.html("<div style='width: 960px; margin: 0px auto; position: relative;'>\n  <p style='margin-top:10px; font-size: 20px; color: white; padding-top: 3px;'>Congratulations! You have solved this problem!</p>\n</div>");
      this.$success_status.fadeIn();
      this.$success_status.find('a.closeit').die();
      return this;
    };
    closeSuccessStatus = function() {
      var $success_status;
      $success_status = $("#success-status-wrap");
      if ($success_status.length !== 0) {
        $success_status.fadeOut();
        $('body').removeClass('home-status-padding');
        $('body div.navbar.navbar-fixed-top').removeClass('navbar-status-padding');
        $success_status.html('');
      }
      return this;
    };
    objCookie = function(key, val) {
      var e;
      if (val === void 0) {
        try {
          val = JSON.parse($.cookie(key));
        } catch (_error) {
          e = _error;
          val = $.cookie(key);
        }
        return val;
      } else {
        if (typeof val === "object") {
          return $.cookie(key, JSON.stringify(val));
        } else {
          return $.cookie(key, val);
        }
      }
    };
    htmlEncode = function(value) {
      if (value === '' || value === void 0) {
        return '';
      }
      return String(value).replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
    };
    IS('util').pagination = pagination;
    IS('util').trim = trim;
    IS('util').ajaxmsg = ajaxmsg;
    IS('util').initializeTimers = initializeTimers;
    IS('util').semiFix = semiFix;
    IS('util').uploadDialog = uploadDialog;
    IS('util').padZeros = padZeros;
    IS('util').mp_ping = mp_ping;
    IS('util').numberSuffix = numberSuffix;
    IS('util').showLoginError = showLoginError;
    IS('util').successStatus = successStatus;
    IS('util').closeSuccessStatus = closeSuccessStatus;
    IS('util').htmlEncode = htmlEncode;
    return IS('util').objCookie = objCookie;
  });

}).call(this);
