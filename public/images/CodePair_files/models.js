// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  (function() {
    var CurrentModel, CursorModel, GenericModel, InterviewModel, LibraryTypeModel, PaperModel, QuestionModel, QuestionsCountModel, SharedModel, SharedObjectModel, UserPresenceModel, UsersModel, app, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
    app = IS('ip');
    GenericModel = (function(_super) {
      __extends(GenericModel, _super);

      GenericModel.prototype.def = {};

      GenericModel.prototype.filter = [];

      function GenericModel(options) {
        options = options || {};
        _.defaults(options, this.def);
        options = _.omit(options, this.filter);
        GenericModel.__super__.constructor.call(this, options);
        this.bindAll();
      }

      GenericModel.prototype.bindAll = function() {
        if (!this._binded) {
          _.bindAll(this);
          return this._binded = true;
        }
      };

      GenericModel.prototype.fetch = function(options) {
        if (options == null) {
          options = {};
        }
        this.sync_status = false;
        this.trigger('initreset');
        if (options.disable_throbber === void 0 || options.disable_throbber !== true) {
          1;
        } else {
          this.disable_throbber = true;
        }
        return GenericModel.__super__.fetch.call(this, options);
      };

      GenericModel.prototype.parse = function(resp, xhr) {
        var f, set_data_fields, that, _fn, _i, _len;
        if (xhr !== void 0) {
          if (this.disable_throbber === void 0 || this.disable_throbber !== true) {
            1;
          } else {
            this.disable_throbber = false;
          }
          this.sync_status = true;
          set_data_fields = ['geolocation', 'possible_rank', 'status', 'tinker_data', 'message'];
          if (resp) {
            that = this;
            _fn = function(f) {
              if (resp[f]) {
                return that[f] = resp[f];
              }
            };
            for (_i = 0, _len = set_data_fields.length; _i < _len; _i++) {
              f = set_data_fields[_i];
              _fn(f);
            }
            if (that.tinker_data) {
              1;
            }
          }
          if (resp && resp.model) {
            return GenericModel.__super__.parse.call(this, resp.model, xhr);
          } else {
            return GenericModel.__super__.parse.call(this, resp, xhr);
          }
        } else {
          return GenericModel.__super__.parse.call(this, resp, xhr);
        }
      };

      return GenericModel;

    })(Backbone.Model);
    SharedModel = (function(_super) {
      __extends(SharedModel, _super);

      SharedModel.prototype.def = {
        type: 'text',
        channel: '/channel'
      };

      SharedModel.prototype.filter = ['so', 'def', 'sodoc', 'doc', 'docname', 'type', 'channel', 'user'];

      SharedModel.prototype.setDefault = function() {
        if (!this.getValue()) {
          return this.setValue(this.def);
        }
      };

      function SharedModel(options) {
        SharedModel.__super__.constructor.call(this, options);
        this.docname = options.docname;
        if (!this.docname) {
          this.docname = IS.randomString(20);
        }
        this.type = options.type;
        this.channel = options.channel;
        this.def = options.def;
        sharejs.open(this.docname, this.type, this.channel, this.onConnect);
      }

      SharedModel.prototype.onConnect = function(error, doc) {
        if (error) {
          IS.error(error);
          this.trigger('error', error);
          return;
        }
        this.doc = doc;
        this.setDefault();
        this.trigger('connect', doc);
        return this.registerEvents();
      };

      SharedModel.prototype.onChange = function(op) {
        this.trigger('remoteop', op);
        return this.trigger('docchange', op);
      };

      SharedModel.prototype.onDelete = function() {
        this.trigger('destroy');
        this.doc = null;
        this.destroy();
        return IS.debug('destroying');
      };

      SharedModel.prototype.registerEvents = function() {
        this.doc.on('remoteop', this.onChange);
        return this.doc.on('close', this.onDelete);
      };

      SharedModel.prototype.setValue = function(val) {
        var cur;
        if (this.doc) {
          cur = this.getValue();
          if (cur) {
            this.doc.del(1, cur.length + 1);
          }
          return this.doc.insert(0, val);
        }
      };

      SharedModel.prototype.getValue = function() {
        if (this.doc) {
          return this.doc.getText();
        }
      };

      return SharedModel;

    })(GenericModel);
    SharedObjectModel = (function(_super) {
      __extends(SharedObjectModel, _super);

      SharedObjectModel.prototype.def = {
        type: 'json',
        channel: '/channel',
        def: {}
      };

      function SharedObjectModel(options) {
        SharedObjectModel.__super__.constructor.call(this, options);
      }

      SharedObjectModel.prototype.setValue = function(val) {
        if (this.doc) {
          return this.doc.set(val);
        }
      };

      SharedObjectModel.prototype.getValue = function() {
        if (this.doc) {
          return this.doc.get();
        }
      };

      SharedObjectModel.prototype.onConnect = function(error, doc) {
        if (!error) {
          this.doc = doc;
          if (!doc.get()) {
            this.setValue(_.clone(this.def));
          }
          this.set(doc.get());
          this.on('change', this.onPropertyChange);
        }
        return SharedObjectModel.__super__.onConnect.call(this, error, doc);
      };

      SharedObjectModel.prototype.getType = function(ob) {
        var type;
        type = typeof ob;
        if (type === 'object') {
          if (_.isArray(ob)) {
            return 'array';
          }
        }
        return type;
      };

      SharedObjectModel.prototype.objectDiff = function(ob1, ob2) {
        var ret, t1, t2,
          _this = this;
        if (_.isEqual(ob1, ob2)) {
          return false;
        }
        t1 = this.getType(ob1);
        t2 = this.getType(ob2);
        if (t1 === t2) {
          if (t1 === 'object') {
            ob1 = _.clone(ob1);
            ret = {};
            _.each(ob2, function(val, ix) {
              if (!_.isEqual(ob1[ix], val)) {
                ret[ix] = val;
              }
              return delete ob1[ix];
            });
            _.each(ob1, function(val, ix) {
              return ret[ix] = void 0;
            });
            return ret;
          }
        }
        return ob2;
      };

      SharedObjectModel.prototype.onChange = function(op) {
        var cur, curdoc, diff;
        SharedObjectModel.__super__.onChange.call(this, op);
        cur = this.toJSON();
        curdoc = this.doc.get();
        diff = this.objectDiff(cur, curdoc);
        if (diff !== false) {
          return this.set(diff);
        }
      };

      SharedObjectModel.prototype.onPropertyChange = function() {
        var cur, curdoc, diff, ops,
          _this = this;
        cur = this.toJSON();
        curdoc = this.doc.get();
        diff = this.objectDiff(curdoc, cur);
        if (diff !== false) {
          if (_.isObject(diff)) {
            ops = [];
            _.each(diff, function(val, ix) {
              if (typeof val === 'undefined') {
                return ops.push({
                  p: [ix],
                  od: curdoc[ix]
                });
              } else {
                return ops.push({
                  p: [ix],
                  od: curdoc[ix],
                  oi: val
                });
              }
            });
            return this.doc.submitOp(ops);
          } else {
            return this.setValue(diff);
          }
        }
      };

      return SharedObjectModel;

    })(SharedModel);
    CurrentModel = (function(_super) {
      __extends(CurrentModel, _super);

      function CurrentModel() {
        _ref = CurrentModel.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      return CurrentModel;

    })(GenericModel);
    UserPresenceModel = (function(_super) {
      __extends(UserPresenceModel, _super);

      UserPresenceModel.prototype.filter = ['so', 'def', 'doc', 'user', 'prefix', 'cursor'];

      UserPresenceModel.prototype.def = {
        user: null,
        expiry: 30000
      };

      function UserPresenceModel(options) {
        options = _.clone(options || {});
        UserPresenceModel.__super__.constructor.call(this, options);
        this.user = options.user || app.Current.get('user');
        this.expiry = options.expiry;
        this.cursor = options.cursor;
        this.so = options.so;
        this.so.on('connect', this.onConnect);
        if (this.so.doc) {
          this.onConnect();
        }
        this.so.on('change:users', this.onChange);
      }

      UserPresenceModel.prototype.onConnect = function() {
        return setTimeout(this.check);
      };

      UserPresenceModel.prototype.hasChanged = function(arr) {
        var newids, oldids;
        oldids = _.uniq(_.pluck(this.get('users') || [], 'id'));
        newids = _.uniq(_.pluck(arr || [], 'id'));
        return newids.length !== oldids.length;
      };

      UserPresenceModel.prototype.onChange = function() {
        if (this.hasChanged(this.so.get('users'))) {
          return this.set('users', this.so.get('users'));
        }
      };

      UserPresenceModel.prototype.check = function() {
        var arr, currentTime, user,
          _this = this;
        currentTime = IS.getServerTime() / 1000;
        if (!this.user.color) {
          this.user.color = this.cursor.getNext();
        }
        user = _.clone(this.user);
        user.timestamp = currentTime;
        arr = this.so.get('users') || [];
        arr = _.chain(arr).filter(function(u) {
          var old;
          old = Math.abs(u.timestamp - currentTime) >= 30;
          if (old) {
            _this.cursor.set(u.color, void 0);
          }
          return !old;
        }).reject(function(u) {
          return u.uid === user.uid;
        }).toArray().value();
        arr.push(user);
        this.so.set('users', arr);
        if (this.hasChanged(arr)) {
          this.set('users', arr);
        }
        return setTimeout(this.check, this.expiry);
      };

      return UserPresenceModel;

    })(GenericModel);
    UsersModel = (function(_super) {
      __extends(UsersModel, _super);

      function UsersModel() {
        _ref1 = UsersModel.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      UsersModel.prototype.initialize = function(options) {
        var that;
        this.user = options.user;
        this.slug = window.location.pathname.split('/').pop();
        that = this;
        return setInterval(function() {
          return that.fetch({
            data: that.user,
            type: "POST"
          });
        }, 3000);
      };

      UsersModel.prototype.url = function() {
        var url;
        if (this.slug) {
          url = "/paper/" + this.slug + "/users";
        }
        return url;
      };

      return UsersModel;

    })(GenericModel);
    CursorModel = (function(_super) {
      __extends(CursorModel, _super);

      CursorModel.colors = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"];

      CursorModel.prototype.filter = ['so', 'def', 'doc', 'user', 'prefix'];

      CursorModel.prototype.getNext = function() {
        var _this = this;
        if (this.current) {
          return this.current;
        }
        _.each(app.users.get("onlineUsers"), function(user) {
          if (user.uid === app.users.user.uid) {
            return _this.current = user.color;
          }
        });
        return this.current;
      };

      function CursorModel(options) {
        options = _.clone(options || {});
        CursorModel.__super__.constructor.call(this, options);
        this.so = options.so;
      }

      return CursorModel;

    })(SharedObjectModel);
    PaperModel = (function(_super) {
      __extends(PaperModel, _super);

      PaperModel.prototype.def = {
        type: 'json',
        channel: '/channel',
        def: {
          language: 'cpp',
          theme: 'tomorrow_night',
          compiling: false,
          input: '',
          console: '',
          saved_codes: {},
          index: 0,
          status: 1
        }
      };

      PaperModel.prototype.compile = function() {
        if (!this.get('compiling')) {
          return $.ajax({
            url: app.Current.get('compileurl'),
            type: 'POST',
            data: {
              code: this.editor.getValue(),
              lang: this.get('language'),
              input: this.get('input'),
              docname: this.docname
            }
          });
        }
      };

      PaperModel.prototype.set = function(attributes, options) {
        return PaperModel.__super__.set.call(this, attributes, options);
      };

      function PaperModel(options) {
        var interviewstreetLibrary, params,
          _this = this;
        if (!options.docname) {
          options.docname = IS.randomString(20);
        }
        if (options.def && options.def.index && options.def.index > 0) {
          options.postfix = '-' + String(options.def.index + 1);
        } else {
          options.postfix = '';
        }
        params = _.clone(options || {});
        params.docname += '-settings' + options.postfix;
        PaperModel.__super__.constructor.call(this, params);
        this.cursor = new CursorModel({
          docname: options.docname + '-cursor' + options.postfix,
          def: {},
          so: this
        });
        this.editor = new SharedModel({
          type: 'text',
          docname: options.docname + '-editor' + options.postfix,
          def: app.Current.get('defaultLanguageTemplates')['cpp']
        });
        this.questions = new SharedObjectModel({
          docname: options.docname + '-questions' + options.postfix,
          def: []
        });
        this.scratch_pad = app.scratch_pad;
        if (app.Current.get('user').role === 'admin') {
          this.feedback = app.feedback;
          this.libraries = new app.LibraryTypeCollection;
          interviewstreetLibrary = new app.LibraryTypeModel({
            name: 'interviewstreet'
          });
          this.libraries.add(interviewstreetLibrary);
          this.library = new app.LibraryCollection({
            signature: IS.getParameters().b,
            slug: window.location.pathname.split('/').pop(),
            password: app.password
          });
          this.library.fetch();
          this.personalLibrary = new app.LibraryCollection({
            signature: IS.getParameters().b,
            slug: window.location.pathname.split('/').pop(),
            password: app.password
          });
          this.personalLibrary.setLibrary('personal');
          this.personalLibrary.fetch({
            success: function(collection) {
              var personalLibrary;
              if (collection.models.length > 0) {
                personalLibrary = new app.LibraryTypeModel({
                  name: 'interviewstreet'
                });
                return _this.libraries.add(personalLibrary);
              }
            }
          });
          this.interview = new app.InterviewModel;
          this.interview.fetch();
        }
      }

      return PaperModel;

    })(SharedObjectModel);
    QuestionModel = (function(_super) {
      __extends(QuestionModel, _super);

      function QuestionModel() {
        _ref2 = QuestionModel.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      QuestionModel.prototype.initialize = function(options) {
        this.signature = IS.getParameters().b;
        this.password = app.password;
        this.slug = window.location.pathname.split('/').pop();
        if (options.qhash) {
          this.qhash = options.qhash;
        }
        return QuestionModel.__super__.initialize.apply(this, arguments);
      };

      QuestionModel.prototype.url = function() {
        var url;
        if (this.qhash && this.signature && this.password && this.slug) {
          url = "/paper/" + this.slug + "/question/" + this.signature + "/" + this.password + "/" + this.qhash;
        }
        return url;
      };

      return QuestionModel;

    })(GenericModel);
    InterviewModel = (function(_super) {
      __extends(InterviewModel, _super);

      function InterviewModel() {
        _ref3 = InterviewModel.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      InterviewModel.prototype.initialize = function() {
        this.signature = IS.getParameters().b;
        this.password = app.password ? app.password : 'a';
        this.slug = window.location.pathname.split('/').pop();
        return InterviewModel.__super__.initialize.apply(this, arguments);
      };

      InterviewModel.prototype.url = function() {
        var url;
        if (this.signature && this.password) {
          url = "/paper/" + this.slug + "/interview/" + this.signature + "/" + this.password;
        }
        return url;
      };

      return InterviewModel;

    })(GenericModel);
    LibraryTypeModel = (function(_super) {
      __extends(LibraryTypeModel, _super);

      function LibraryTypeModel() {
        _ref4 = LibraryTypeModel.__super__.constructor.apply(this, arguments);
        return _ref4;
      }

      return LibraryTypeModel;

    })(GenericModel);
    QuestionsCountModel = (function(_super) {
      __extends(QuestionsCountModel, _super);

      function QuestionsCountModel() {
        _ref5 = QuestionsCountModel.__super__.constructor.apply(this, arguments);
        return _ref5;
      }

      QuestionsCountModel.prototype.def = {
        type: 'json',
        channel: '/channel',
        def: {
          total: 1
        }
      };

      return QuestionsCountModel;

    })(SharedObjectModel);
    app.LibraryTypeModel = LibraryTypeModel;
    app.InterviewModel = InterviewModel;
    app.CurrentModel = CurrentModel;
    app.PaperModel = PaperModel;
    app.SharedModel = SharedModel;
    app.SharedObjectModel = SharedObjectModel;
    app.UserPresenceModel = UserPresenceModel;
    app.QuestionModel = QuestionModel;
    app.QuestionsCountModel = QuestionsCountModel;
    return app.UsersModel = UsersModel;
  })();

}).call(this);
