// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  (function() {
    var GenericCollection, LibraryCollection, LibraryTypeCollection, PapersCollection, app, _ref, _ref1, _ref2, _ref3;
    app = IS('ip');
    GenericCollection = (function(_super) {
      __extends(GenericCollection, _super);

      function GenericCollection() {
        _ref = GenericCollection.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      GenericCollection.prototype.initialize = function() {
        this.sync_status = false;
        return this.render_once = false;
      };

      GenericCollection.prototype.fetch = function(options) {
        if (options == null) {
          options = {};
        }
        this.trigger('initreset');
        return GenericCollection.__super__.fetch.call(this, options);
      };

      GenericCollection.prototype.parse = function(resp) {
        this.sync_status = true;
        this.render_once = false;
        if (resp.metamodel) {
          this.metamodel = resp.metamodel;
        }
        if (resp.total) {
          this.total = resp.total;
        }
        if (resp.page) {
          this.page = resp.page;
        }
        if (resp.real_time_data) {
          app.RealTimeModel.setData(resp.real_time_data);
        }
        return resp.models;
      };

      GenericCollection.prototype.setCurrentPage = function(page) {
        this.page = page;
      };

      GenericCollection.prototype.getCurrentPage = function() {
        return this.page;
      };

      GenericCollection.prototype.getTotal = function() {
        return this.total;
      };

      return GenericCollection;

    })(Backbone.Collection);
    PapersCollection = (function(_super) {
      __extends(PapersCollection, _super);

      function PapersCollection() {
        _ref1 = PapersCollection.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      PapersCollection.prototype.model = app.PaperModel;

      return PapersCollection;

    })(GenericCollection);
    LibraryCollection = (function(_super) {
      __extends(LibraryCollection, _super);

      function LibraryCollection() {
        _ref2 = LibraryCollection.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      LibraryCollection.prototype.model = app.QuestionModel;

      LibraryCollection.prototype.initialize = function(options) {
        this.offset = 0;
        this.limit = 8;
        this.library = 'interviewstreet';
        if (options) {
          this.signature = options.signature;
          this.password = options.password;
          this.slug = options.slug;
        }
        return LibraryCollection.__super__.initialize.call(this, options);
      };

      LibraryCollection.prototype.url = function() {
        var url;
        if (this.signature && this.password) {
          url = "/library/" + this.signature + "/" + this.password + "/" + this.slug + "?offset=" + this.offset + "&limit=" + this.limit;
          if (this.library) {
            url += "&library=" + this.library;
          }
        }
        return url;
      };

      LibraryCollection.prototype.getTotal = function() {
        return this.total;
      };

      LibraryCollection.prototype.getCurrentPage = function() {
        var page;
        return page = (this.offset / this.limit) + 1;
      };

      LibraryCollection.prototype.setPage = function(page) {
        if (page > 0) {
          return this.offset = (page - 1) * this.limit;
        }
      };

      LibraryCollection.prototype.setLibrary = function(library) {
        this.library = library;
      };

      LibraryCollection.prototype.getLibrary = function() {
        return this.library;
      };

      return LibraryCollection;

    })(GenericCollection);
    LibraryTypeCollection = (function(_super) {
      __extends(LibraryTypeCollection, _super);

      function LibraryTypeCollection() {
        _ref3 = LibraryTypeCollection.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      LibraryTypeCollection.prototype.model = app.LibraryTypeModel;

      return LibraryTypeCollection;

    })(GenericCollection);
    app.LibraryTypeCollection = LibraryTypeCollection;
    app.LibraryCollection = LibraryCollection;
    return app.PapersCollection = PapersCollection;
  })();

}).call(this);
