// Generated by CoffeeScript 1.6.3
(function() {
  $.ajaxSetup({
    cache: false
  });

  jQuery(function() {
    var app, candidate_login_view, login_view, slug,
      _this = this;
    app = IS('ip');
    app.start = function() {
      var q, uid;
      q = app.q;
      uid = (new Date()).getTime();
      app.Current = new app.CurrentModel({
        user: {
          uid: uid,
          id: q.id,
          email: q.email,
          signature: q.signature,
          role: q.role,
          phone: q.phone,
          name: q.name,
          lastPing: uid
        },
        docname: q.docname || window.location.pathname.split('/').pop(),
        title: q.title,
        theme: 'tomorrow_night',
        language: 'cpp',
        channel: IS.getChannel(),
        compileurl: "/paper/" + (window.location.pathname.split('/').pop()) + "/compilecode/",
        authenticateurl: '/authenticate/',
        defaultLanguageTemplates: {
          "c": '//This is the text editor interface. \n//Anything you type or change here will be seen by the other person in real time.\n//The code fragment below shows you how to read from STDIN and write out to STDOUT. \n//When you press "Run Code", the inputs are taken from the contents of the INPUT tab below\n//Your program\'s output (or compiler errors etc.) will appear in the OUTPUT tab.\n\n#include <stdio.h>\nint main() {\n    int i, n, max_element_index;\n    scanf("%d", &n);\n    int arr[n];\n    for (i=0; i<n; i++) {\n        scanf("%d", &arr[i]);\n    }\n\n    max_element_index = 0;\n    for (i=0; i<n; i++) {\n        if (arr[i] > arr[max_element_index]) {\n            max_element_index = i;\n        }\n    }\n\n    printf("The largest element of the array is: %d\\n", arr[max_element_index]);\n\n    return 0;\n}',
          "cpp": '//This is the text editor interface. \n//Anything you type or change here will be seen by the other person in real time.\n//The code fragment below shows you how to read from STDIN and write out to STDOUT. \n//When you press "Run Code", the inputs are taken from the contents of the INPUT tab below\n//Your program\'s output (or compiler errors etc.) will appear in the OUTPUT tab.\n\n#include <iostream>\nusing namespace std;\nint main() {\n    int i, n, max_element_index;\n    cin>>n;\n    int arr[n];\n    for (i=0; i<n; i++) {\n        cin>>arr[i];\n    }\n\n    max_element_index = 0;\n    for (i=0; i<n; i++) {\n        if (arr[i] > arr[max_element_index]) {\n            max_element_index = i;\n        }\n    }\n\n    cout<<"The largest element of the array is: "<<arr[max_element_index]<<endl;\n\n    return 0;\n}',
          "java": '//This is the text editor interface. \n//Anything you type or change here will be seen by the other person in real time.\n//The code fragment below shows you how to read from STDIN and write out to STDOUT. \n//When you press "Run Code", the inputs are taken from the contents of the INPUT tab below\n//Your program\'s output (or compiler errors etc.) will appear in the OUTPUT tab.\n\nimport java.io.*;\nimport java.util.Scanner;\n\npublic class Solution {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        \n        int[] array = new int[n];\n        for (int i = 0; i < n; i++) {\n            array[i] = in.nextInt();\n        }\n        \n        int maxElementIndex = 0;\n        for (int i = 1; i < n; i++) {\n            if (array[i] > array[maxElementIndex]) maxElementIndex = i;\n        }\n        \n        System.out.println("The largest element of the array is: " + array[maxElementIndex]);\n    }\n}',
          "csharp": '//This is the text editor interface. \n//Anything you type or change here will be seen by the other person in real time.\n//The code fragment below shows you how to read from STDIN and write out to STDOUT. \n//When you press "Run Code", the inputs are taken from the contents of the INPUT tab below\n//Your program\'s output (or compiler errors etc.) will appear in the OUTPUT tab.\n\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static void Main(string[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        int[] arr = new int [n];\n        for(int i = 0; i < n; i++) {\n            arr[i] = Convert.ToInt32(Console.ReadLine());\n        }\n        \n        int maxElementIndex = 0;\n        for(int i = 0; i < n; i++) {\n            if (arr[i] > arr[maxElementIndex]) {\n                maxElementIndex = i;\n            }\n        }\n        System.Console.WriteLine("The largest element of the array is " + arr[maxElementIndex]);\n    }\n}',
          "ruby": '#This is the text editor interface. \n#Anything you type or change here will be seen by the other person in real time.\n#The code fragment below shows you how to read from STDIN and write out to STDOUT. \n#When you press "Run Code", the inputs are taken from the contents of the INPUT tab below\n#Your program\'s output (or compiler errors etc.) will appear in the OUTPUT tab.\n\nN = Integer(gets)\narr = Array.new(N)\ni = 0\n\n1.step(N, 1) do |i|\n    arr[i-1] = Integer(gets)\nend\n\nmaxElementIndex = 0\n1.step(N, 1) do |i|\n    if arr[i-1] > arr[maxElementIndex]\n        maxElementIndex = i-1\n    end\n    \nend\n\nprint "The largest element of the array is: #{arr[maxElementIndex]}"',
          "python": '#This is the text editor interface. \n#Anything you type or change here will be seen by the other person in real time.\n#The code fragment below shows you how to read from STDIN and write out to STDOUT. \n#When you press "Run Code", the inputs are taken from the contents of the INPUT tab below\n#Your program\'s output (or compiler errors etc.) will appear in the OUTPUT tab.\n\nN = int(raw_input())\narr = []\nfor i in xrange(N):\n    arr.append(int(raw_input()))\n\nmaxElementIndex = 0\nfor i in xrange(N):\n    if arr[i] > arr[maxElementIndex]:\n        maxElementIndex = i\n\nprint "The largest element of the array is: " , arr[maxElementIndex]',
          "perl": '#This is the text editor interface. \n#Anything you type or change here will be seen by the other person in real time.\n#The code fragment below shows you how to read from STDIN and write out to STDOUT. \n#When you press "Run Code", the inputs are taken from the contents of the INPUT tab below\n#Your program\'s output (or compiler errors etc.) will appear in the OUTPUT tab.\n\n$n = <>;\nfor ($i=0;$i<$n;$i++) {\n    $arr[$i] = <>;\n}\n\n$maxElementIndex = 0;\nfor ($i=0;$i<$n;$i++) {\n    if ($arr[$i] > $arr[$maxElementIndex]) {\n        $maxElementIndex = $i;\n    }\n}\n\nprint "The largest element of the array is: ".$arr[$maxElementIndex];',
          "haskell": '-- This is the text editor interface\n-- Anything you type or change here will be seen by the other person in real time.\n-- The code fragment below shows you how to read from STDIN and write out to STDOUT. \n-- When you press "Run Code", the inputs are taken from the contents of the INPUT tab below\n-- Your program\'s output (or compiler errors etc.) will appear in the OUTPUT tab.\n\n-- Enter your code here. Read input from STDIN. Print output to STDOUT',
          "php": '<?php\n//This is the text editor interface. \n//Anything you type or change here will be seen by the other person in real time.\n//The code fragment below shows you how to read from STDIN and write out to STDOUT. \n//When you press "Run Code", the inputs are taken from the contents of the INPUT tab below\n//Your program\'s output (or compiler errors etc.) will appear in the OUTPUT tab.\n\n$fp = fopen("php://stdin", "r");\nfscanf($fp, "%d\\n", $n);\n$arr = array();\n\nfor ( $i = 0; $i < $n; $i++) {\n    fscanf($fp, "%d\\n", $arr[$i]);\n}\n\n$maxElementIndex = 0;\nfor ( $i = 0; $i < $n; $i++) {\n    if ($arr[$i] > $arr[$maxElementIndex]) {\n        $maxElementIndex = $i;\n    }\n}\n\necho "The largest element of the array is: ".$arr[$maxElementIndex];',
          "scala": '//This is the text editor interface. \n//Anything you type or change here will be seen by the other person in real time.\n//The code fragment below shows you how to read from STDIN and write out to STDOUT. \n//When you press "Run Code", the inputs are taken from the contents of the INPUT tab below\n//Your program\'s output (or compiler errors etc.) will appear in the OUTPUT tab.\n\n// main method in \"Solution\" will be run as your answer\nobject Solution {\n\n    def main(args: Array[String]) {\n        //Enter your code here. Read input from STDIN. Print output to STDOUT\n    }\n\n}',
          "clojure": ';This is the text editor interface. \n;Anything you type or change here will be seen by the other person in real time.\n;The code fragment below shows you how to read from STDIN and write out to STDOUT. \n;When you press "Run Code", the inputs are taken from the contents of the INPUT tab below\n;Your program\'s output (or compiler errors etc.) will appear in the OUTPUT tab.\n\n; Enter your code here. Read input from STDIN. Print output to STDOUT',
          "go": "package main\nimport \"fmt\"\n\nfunc main() {\n    //Enter your code here. Read input from STDIN. Print output to STDOUT\n}",
          "javascript": '//This is the text editor interface. \n//Anything you type or change here will be seen by the other person in real time.\n//The code fragment below shows you how to read from STDIN and write out to STDOUT. \n//When you press "Run Code", the inputs are taken from the contents of the INPUT tab below\n//Your program\'s output (or compiler errors etc.) will appear in the OUTPUT tab.\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding("utf-8");\nvar input = "";\nprocess.stdin.on("data", function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on("end", function () {\n    input_array = input.split("\\n");\n    var n = parseInt(input_array[0], 10);\n    arr = [];\n    for (var i=0; i < n; i++) {\n        arr.push(parseInt(input_array[1+i], 10));\n    }\n\n    maxElementIndex = 0;\n    for (i=0; i < n; i++) {\n        if (arr[i] > arr[maxElementIndex]) {\n            maxElementIndex = i;\n        }\n    }\n\n    console.log("The largest element of the array is: " + arr[maxElementIndex]);\n\n});',
          "erlang": '-module(solution).\n-export([main/0]).\n\nmain() ->\n    {ok, [X]} = io:fread("", "~d"),\n    hello(X).\n\nhello(N) when N =< 0 -> ok;\nhello(N) ->\n   io:fwrite("Hello World~n"),\n   hello(N - 1).',
          "groovy": "//Enter your code here. Read input from STDIN. Print output to STDOUT",
          "objectivec": "#import <stdio.h>\n\nint main( int argc, const char *argv[] ) {\n    //Enter your code here. Read input from STDIN. Print output to STDOUT\n    return 0;\n}",
          "cobol": "IDENTIFICATION DIVISION.\nPROGRAM-ID. solution.\nENVIRONMENT DIVISION.\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n\n01 N PICTURE IS 99.\n\nPROCEDURE DIVISION.\n    ACCEPT N.\n*> Enter your code here\n\n    STOP RUN.",
          "bash": "#Enter your code here. Read input from STDIN. Print output to STDOUT"
        }
      });
      app.users = new app.UsersModel({
        user: app.Current.get("user")
      });
      app.router = new app.ApplicationRouter();
      return Backbone.history.start();
    };
    app.q = IS.getParameters();
    app.q = _.defaults((app.q && app.q.b ? JSON.parse(atob(app.q.b)) : app.q), {
      id: IS.randomString(10),
      name: 'User-' + IS.randomString(5),
      role: 'user',
      title: 'Live Coding'
    });
    app.password = '';
    if (app.q && app.q.role && app.q.role === 'interviewer') {
      if (app.q.access_code) {
        slug = window.location.pathname.split('/').pop();
        return $.post("/paper/" + slug + "/authenticate/", {
          attendant: IS.getParameters().b,
          password: app.q.access_code
        }, function(data) {
          var login_view;
          if (data.status === 'Success') {
            app.password = app.q.access_code;
            app.q.role = 'admin';
            app.q.name = app.q.name;
            return app.start();
          } else {
            login_view = new app.LoginModalView({
              name: app.q.name,
              role: 'interviewer'
            });
            return $('#login-modal-wrapper').html(login_view.render().el);
          }
        }, "json");
      } else {
        login_view = new app.LoginModalView({
          name: app.q.name,
          role: 'interviewer'
        });
        return $('#login-modal-wrapper').html(login_view.render().el);
      }
    } else if (app.q && app.q.role && app.q.role === "candidate") {
      if (app.q.name) {
        app.q.name = app.q.name;
        app.q.id = app.q.name.replace(' ', '');
        app.q.role = 'user';
        return app.start();
      } else {
        login_view = new app.LoginModalView;
        return $('#login-modal-wrapper').html(login_view.render().el);
      }
    } else if (_.isEmpty(IS.getParameters())) {
      candidate_login_view = new app.CandidateLoginModalView;
      return $('#login-modal-wrapper').html(candidate_login_view.render().el);
    } else {
      login_view = new app.LoginModalView;
      return $('#login-modal-wrapper').html(login_view.render().el);
    }
    /*
    if q.name.match(/^User-.*$/ig)
      q.name = prompt('Please enter your name')
      q.id = q.name.replace(' ', '')
      q.role = 'user'
      start()
    else if q.role == 'interviewer'
      password = prompt("Please enter your access key")
      $.post('/authenticate/', {
        attendant: IS.getParameters().b,
        password: password
      }, (data) =>
        if data.status == 'Success'
          app.password = password
          q.role = 'admin'
          start()
        else
          q.role = 'user'
          start()
      , "json")
    else
      q.role = 'user'
      start()
    */

  });

}).call(this);
