// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  jQuery(function() {
    var ApplicationView, CandidateLoginModalView, ContentView, EndInterviewConfirmationModalView, FooterView, GenericView, HeaderView, InterviewEndedModalView, InterviewerLoginModalView, InterviewerQuestionLibraryView, InterviewerQuestionView, LoginModalView, Range, ResumeModalView, ResumeView, SharedCodeEditorView, SharedConsoleView, SharedEditorView, SharedFeedbackView, SharedScratchPadView, SharedSelectView, SharedTestCaseView, SharedView, TaskDescriptionView, UserPresenceView, app, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref18, _ref19, _ref2, _ref20, _ref21, _ref22, _ref23, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
    app = IS('ip');
    Range = ace.require('ace/range').Range;
    GenericView = (function(_super) {
      __extends(GenericView, _super);

      function GenericView() {
        _ref = GenericView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      GenericView.prototype.defaults = {};

      GenericView.prototype.bindAll = function() {
        if (!this.binded) {
          _.bindAll(this);
          return this.binded = true;
        }
      };

      GenericView.prototype.initialize = function(options) {
        GenericView.__super__.initialize.call(this, options);
        _.defaults(options, this.defaults);
        return this.bindAll();
      };

      return GenericView;

    })(Backbone.View);
    ApplicationView = (function(_super) {
      __extends(ApplicationView, _super);

      function ApplicationView() {
        _ref1 = ApplicationView.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      ApplicationView.prototype.initialize = function(options) {
        var _this = this;
        this.el = options.el;
        this.header_view = new HeaderView({
          model: this.model,
          parent: this
        });
        this.content_view = new ContentView({
          model: this.model
        });
        this.footer_view = new FooterView({
          model: this.model
        });
        this.subviews = [this.header_view, this.content_view, this.footer_view];
        this.model.bind("reset", this.render, this);
        this.model.bind("change:status", this.interviewEnded, this);
        this.model.bind('change:compiling', function() {
          if (_this.model.get('compiling')) {
            return IS('util').ajaxmsg("Compiling...", true, false);
          } else {
            return IS('util').ajaxmsg("Done..", false, true, 1);
          }
        });
        app.questions.bind('change', this.checkQuestions);
        return this.render();
      };

      ApplicationView.prototype.render = function() {
        var subview, _i, _len, _ref2;
        $(this.el).empty();
        _ref2 = this.subviews;
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          subview = _ref2[_i];
          $(this.el).append(subview.render().el);
        }
        return this;
      };

      ApplicationView.prototype.interviewEnded = function(e) {
        var _this = this;
        if (this.model.get('status') === 0) {
          return setTimeout(function() {
            return _this.header_view.launchInterviewEndedModal();
          }, 200);
        }
      };

      ApplicationView.prototype.closeApp = function(e) {
        return this.content_view.remove();
      };

      ApplicationView.prototype.checkQuestions = function() {
        var i, indexes, paper, _results;
        indexes = [];
        _.each(app.papers.models, function(paper, key) {
          if (paper.get('index')) {
            return indexes.push(paper.get('index'));
          }
        });
        if (_.isEmpty(indexes)) {
          indexes = [0];
        }
        if (app.papers.models.length !== app.questions.get('total')) {
          i = 0;
          _results = [];
          while (i < app.questions.get('total')) {
            if ($.inArray(i, indexes) === -1) {
              paper = new app.PaperModel({
                user: app.Current.get('user'),
                docname: app.Current.get('docname'),
                title: app.Current.get('title'),
                def: {
                  language: 'cpp',
                  theme: 'tomorrow_night',
                  users: [],
                  compiling: false,
                  input: '',
                  console: '',
                  saved_codes: {},
                  index: i
                }
              });
              app.papers.add(paper);
            }
            _results.push(i++);
          }
          return _results;
        }
      };

      return ApplicationView;

    })(Backbone.View);
    HeaderView = (function(_super) {
      __extends(HeaderView, _super);

      function HeaderView() {
        this.launchInterviewEndedModal = __bind(this.launchInterviewEndedModal, this);
        _ref2 = HeaderView.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      HeaderView.prototype.template = _.template($("#header-template").html());

      HeaderView.prototype.initialize = function(options) {
        if (options == null) {
          options = {};
        }
        HeaderView.__super__.initialize.call(this, options);
        this.parent = options.parent;
        this.admin = false;
        return app.questions.bind('change', this.render, this);
      };

      HeaderView.prototype.events = function() {
        return {
          'click .resume_button': "showResume",
          "click .js-add-question": "newQuestion",
          "click .open-question": "openQuestion",
          "click .js-show-scratch-pad": "showScratchPad",
          "click .js-end-interview": "endInterview"
        };
      };

      HeaderView.prototype.endInterview = function(e) {
        var end_interview_confirmation_modal;
        e.preventDefault();
        end_interview_confirmation_modal = new EndInterviewConfirmationModalView({
          parent: this
        });
        return this.$el.append(end_interview_confirmation_modal.render().el);
      };

      HeaderView.prototype.launchInterviewEndedModal = function() {
        var interview_ended_modal;
        this.parent.closeApp();
        interview_ended_modal = new InterviewEndedModalView;
        return this.$el.append(interview_ended_modal.render().el);
      };

      HeaderView.prototype.showResume = function(e) {
        var href, resume_modal;
        e.preventDefault();
        href = $(e.currentTarget).attr('href');
        if (href) {
          resume_modal = new ResumeModalView({
            href: href
          });
          return this.$el.append(resume_modal.render().el);
        }
      };

      HeaderView.prototype.newQuestion = function(e) {
        var index;
        e.preventDefault();
        index = app.questions.get('total');
        return app.router.question(index + 1);
      };

      HeaderView.prototype.openQuestion = function(e) {
        var qnum;
        e.preventDefault();
        this.showCodeEditor();
        qnum = $(e.currentTarget).attr('data-qnum');
        $('.open-question').removeClass('selected');
        $('.js-show-scratch-pad').removeClass('selected');
        $(e.currentTarget).addClass('selected');
        if (qnum !== app.qnum) {
          return app.router.question(qnum);
        }
      };

      HeaderView.prototype.showCodeEditor = function() {
        $('.scratch-pad-container').addClass('hidden');
        return $('.code-editor-container').removeClass('hidden');
      };

      HeaderView.prototype.showScratchPad = function(e) {
        e.preventDefault();
        $('.open-question').removeClass('selected');
        $(e.currentTarget).addClass('selected');
        $(".js-collapse-bottom-container").click();
        $('.code-editor-container').addClass('hidden');
        return $('.scratch-pad-container').removeClass('hidden');
      };

      HeaderView.prototype.render = function() {
        if (app.Current.get('user').role === 'admin') {
          this.admin = true;
        }
        if (!app.qnum) {
          app.qnum = 1;
        }
        $(this.el).html(this.template({
          questions: app.questions.toJSON(),
          admin: this.admin,
          user: app.Current.get('user'),
          title: app.Current.get('title'),
          app: app
        }));
        this.userPresenceView = new UserPresenceView({
          model: app.users
        });
        this.$('#user-presence').append(this.userPresenceView.render().$el);
        return this;
      };

      return HeaderView;

    })(GenericView);
    SharedView = (function(_super) {
      __extends(SharedView, _super);

      function SharedView() {
        _ref3 = SharedView.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      SharedView.prototype.initialize = function(options) {
        if (options == null) {
          options = {};
        }
        SharedView.__super__.initialize.call(this, options);
        this.model.on('connect', this.onConnect);
        this.model.on('destroy', this.destroy);
        this.model.on('remoteop', this.onRemoteChange);
        return this.model.on('change', this.onChange);
      };

      SharedView.prototype.setDoc = function() {};

      SharedView.prototype.onRemoteChange = function() {};

      SharedView.prototype.onChange = function() {};

      SharedView.prototype.destroy = function() {};

      SharedView.prototype.onConnect = function(doc) {
        return this.setDoc(doc);
      };

      return SharedView;

    })(GenericView);
    EndInterviewConfirmationModalView = (function(_super) {
      __extends(EndInterviewConfirmationModalView, _super);

      function EndInterviewConfirmationModalView() {
        this.closePapers = __bind(this.closePapers, this);
        _ref4 = EndInterviewConfirmationModalView.__super__.constructor.apply(this, arguments);
        return _ref4;
      }

      EndInterviewConfirmationModalView.prototype.template = _.template($('#end-interview-confirmation-modal-template').html());

      EndInterviewConfirmationModalView.prototype.initialize = function(options) {
        this.parent = options.parent;
        return EndInterviewConfirmationModalView.__super__.initialize.call(this, options);
      };

      EndInterviewConfirmationModalView.prototype.render = function() {
        var styles, width;
        this.$el.html(this.template);
        width = this.$('.end-interview-confirmation-modal').attr('data-width');
        styles = {
          width: width,
          'margin-left': -(parseInt(width) / 2)
        };
        this.$('.end-interview-confirmation-modal').modal().css(styles);
        return this;
      };

      EndInterviewConfirmationModalView.prototype.events = function() {
        return {
          'click .js-end-interview-yes': 'endInterview',
          'click .js-end-interview-no': 'closeModal'
        };
      };

      EndInterviewConfirmationModalView.prototype.endInterview = function(e) {
        var password, signature, slug, url,
          _this = this;
        e.preventDefault();
        signature = this.signature = IS.getParameters().b;
        password = app.password ? app.password : 'a';
        slug = window.location.pathname.split('/').pop();
        url = "/paper/" + slug + "/" + signature + "/" + password + "/end_interview";
        return $.post(url, function(data) {
          return _this.closePapers();
        });
      };

      EndInterviewConfirmationModalView.prototype.closePapers = function() {
        var _this = this;
        this.$('.close').click();
        return _.each(app.papers.models, function(model) {
          return model.set('status', 0, {
            silent: true
          });
        });
      };

      EndInterviewConfirmationModalView.prototype.closeModal = function(e) {
        e.preventDefault();
        return this.$('.close').click();
      };

      return EndInterviewConfirmationModalView;

    })(GenericView);
    InterviewEndedModalView = (function(_super) {
      __extends(InterviewEndedModalView, _super);

      function InterviewEndedModalView() {
        _ref5 = InterviewEndedModalView.__super__.constructor.apply(this, arguments);
        return _ref5;
      }

      InterviewEndedModalView.prototype.template = _.template($('#interview-ended-modal-template').html());

      InterviewEndedModalView.prototype.render = function() {
        var styles, width;
        this.$el.html(this.template);
        width = this.$('.interview-ended-modal').attr('data-width');
        styles = {
          width: width,
          'margin-left': -(parseInt(width) / 2)
        };
        this.$('.interview-ended-modal').modal({
          'keyboard': false
        }).css(styles);
        console.log('herere11');
        return this;
      };

      return InterviewEndedModalView;

    })(GenericView);
    ResumeView = (function(_super) {
      __extends(ResumeView, _super);

      function ResumeView() {
        _ref6 = ResumeView.__super__.constructor.apply(this, arguments);
        return _ref6;
      }

      ResumeView.prototype.initialize = function(options) {
        this.so = options.so;
        return this.so.on('change', this.render, this);
      };

      ResumeView.prototype.render = function() {
        var _this = this;
        if (this.model.get('resume')) {
          return setTimeout(function() {
            return $('.resume-link').attr('href', _this.model.get('resume')).removeClass('hidden');
          }, 100);
        }
      };

      return ResumeView;

    })(GenericView);
    ResumeModalView = (function(_super) {
      __extends(ResumeModalView, _super);

      function ResumeModalView() {
        _ref7 = ResumeModalView.__super__.constructor.apply(this, arguments);
        return _ref7;
      }

      ResumeModalView.prototype.template = _.template($('#resume-modal-template').html());

      ResumeModalView.prototype.initialize = function(options) {
        return this.href = options.href;
      };

      ResumeModalView.prototype.render = function() {
        var styles, width;
        this.$el.html(this.template({
          resume: encodeURI(this.href)
        }));
        width = this.$('.resume-modal').attr('data-width');
        styles = {
          width: width,
          'margin-left': -(parseInt(width) / 2)
        };
        this.$('.resume-modal').modal().css(styles);
        return this;
      };

      return ResumeModalView;

    })(GenericView);
    InterviewerQuestionLibraryView = (function(_super) {
      __extends(InterviewerQuestionLibraryView, _super);

      function InterviewerQuestionLibraryView() {
        _ref8 = InterviewerQuestionLibraryView.__super__.constructor.apply(this, arguments);
        return _ref8;
      }

      InterviewerQuestionLibraryView.prototype.className = 'interviewer-question-library';

      InterviewerQuestionLibraryView.prototype.tagName = 'div';

      InterviewerQuestionLibraryView.prototype.template = _.template($('#interviewer-question-library-template').html());

      InterviewerQuestionLibraryView.prototype.initialize = function(options) {
        this.libraries = options.libraries;
        this.collection.on('reset', this.render, this);
        this.collection.on('change', this.render, this);
        this.libraries.on('reset', this.render, this);
        this.libraries.on('change', this.render, this);
        this.libraries.on('add', this.render, this);
        this.model.on('change:qhash', this.render, this);
        this.saved_page_states = {};
        return this.libraryOpen = false;
      };

      InterviewerQuestionLibraryView.prototype.events = function() {
        return {
          "click .js-expand-question": "expandQuestion",
          "click .js-use-question": "useQuestion",
          "click .js-back": "showLibrary",
          "click .js-page": "changePage",
          "change #chooseLibrary": "changeLibrary"
        };
      };

      InterviewerQuestionLibraryView.prototype.render = function() {
        var pagination,
          _this = this;
        this.$el.empty();
        pagination = IS('util').pagination(this.collection.getTotal(), "", this.collection.getCurrentPage(), 8, 3);
        window.test = this.libraries;
        this.$el.html(this.template({
          pagination: pagination,
          collection: this.collection,
          libraries: this.libraries
        }));
        if (this.collection.models.length > 0) {
          _.each(this.collection.models, function(model) {
            var question_view;
            question_view = new InterviewerQuestionView({
              question: model
            });
            return _this.$el.find('.interview-quest').append(question_view.render().el);
          });
        } else {
          this.$el.find('.interview-quest').html('No questions present in this library').css({
            'position': 'relative',
            'top': 15
          });
        }
        if (this.model.get('question') && this.model.get('qhash')) {
          this.$('#interviewer-question-detailed').html(this.model.get('question'));
          this.$('.js-use-question').attr('data-qhash', this.model.get('qhash'));
          if (!this.libraryOpen) {
            this.$('#interviewer-questions').addClass('hidden');
            this.$('.js-question-library').addClass('hidden');
            this.$('#interviewer-question-detailed').removeClass('hidden');
            this.$('.js-question').removeClass('hidden');
          }
        }
        return this;
      };

      InterviewerQuestionLibraryView.prototype.changeLibrary = function(e) {
        var current_library, library;
        current_library = this.collection.getLibrary();
        this.saved_page_states[current_library] = this.collection.getCurrentPage();
        library = $(e.currentTarget).val();
        if (this.saved_page_states[library]) {
          this.collection.setPage(this.saved_page_states[library]);
        } else {
          this.collection.setPage(1);
        }
        this.collection.setLibrary(library);
        return this.collection.fetch();
      };

      InterviewerQuestionLibraryView.prototype.expandQuestion = function(e) {
        var qhash, question;
        e.preventDefault();
        qhash = $(e.currentTarget).data('qhash');
        question = '';
        _.each(this.collection.models, function(model) {
          if (model.get('unique_id') === qhash) {
            return question = model;
          }
        });
        if (question) {
          $('#interviewer-question-detailed').html(question.get('question'));
          $('.js-use-question').attr('data-qhash', question.get('unique_id'));
          $('#interviewer-questions').addClass('hidden');
          $('.js-question-library').addClass('hidden');
          $('#interviewer-question-detailed').removeClass('hidden');
          $('.js-question').removeClass('hidden');
          return this.libraryOpen = false;
        }
      };

      InterviewerQuestionLibraryView.prototype.showLibrary = function(e) {
        this.libraryOpen = true;
        $('#interviewer-question-detailed').addClass('hidden');
        $('.js-question').addClass('hidden');
        $('#interviewer-questions').removeClass('hidden');
        return $('.js-question-library').removeClass('hidden');
      };

      InterviewerQuestionLibraryView.prototype.useQuestion = function(e) {
        var check, qhash, question,
          _this = this;
        e.preventDefault();
        qhash = $(e.currentTarget).attr('data-qhash');
        check = confirm("This will update all the templates in the coding area. Are you sure you want to continue?");
        if (check) {
          question = new app.QuestionModel({
            qhash: qhash
          });
          return question.fetch({
            success: function(model) {
              var code, current_language, languages, qdata, saved_codes;
              qdata = model.toJSON();
              languages = qdata.allowedLanguages.split(',');
              saved_codes = _this.model.get('saved_codes');
              _.each(languages, function(language) {
                return saved_codes[language] = qdata[language + '_template_head'] + qdata[language + '_template'] + qdata[language + '_template_tail'];
              });
              _this.model.set('saved_codes', saved_codes);
              current_language = _this.model.get('language');
              if ($.inArray(current_language, languages) === -1) {
                current_language = languages[0];
                _this.model.set('language', current_language);
              }
              _this.model.set('question', qdata.question, {
                silent: true
              });
              _this.model.set('qhash', qdata.unique_id);
              code = saved_codes[current_language];
              return app.editor.setValue(code, code.length + 1);
            },
            error: function() {
              return console.log('error');
            }
          });
        }
      };

      InterviewerQuestionLibraryView.prototype.changePage = function(e) {
        var page;
        e.preventDefault();
        page = parseInt($(e.currentTarget).data('page'), 10);
        this.collection.setPage(page);
        return this.collection.fetch();
      };

      return InterviewerQuestionLibraryView;

    })(GenericView);
    InterviewerQuestionView = (function(_super) {
      __extends(InterviewerQuestionView, _super);

      function InterviewerQuestionView() {
        _ref9 = InterviewerQuestionView.__super__.constructor.apply(this, arguments);
        return _ref9;
      }

      InterviewerQuestionView.prototype.template = _.template($('#interviewer-question-template').html());

      InterviewerQuestionView.prototype.initialize = function(options) {
        return this.question = options.question;
      };

      InterviewerQuestionView.prototype.render = function() {
        this.$el.html(this.template({
          question: this.question.toJSON()
        }));
        return this;
      };

      return InterviewerQuestionView;

    })(GenericView);
    UserPresenceView = (function(_super) {
      __extends(UserPresenceView, _super);

      function UserPresenceView() {
        _ref10 = UserPresenceView.__super__.constructor.apply(this, arguments);
        return _ref10;
      }

      UserPresenceView.prototype.template = _.template($('#user-presence-template').html());

      UserPresenceView.prototype.tagName = 'ul';

      UserPresenceView.prototype.className = 'nav_users';

      UserPresenceView.prototype.initialize = function(options) {
        UserPresenceView.__super__.initialize.call(this, options);
        return this.model.on('change', this.render);
      };

      UserPresenceView.prototype.render = function() {
        var users,
          _this = this;
        users = [];
        if (this.model && this.model.get('onlineUsers')) {
          users = this.model.get('onlineUsers');
          users.sort(function(a, b) {
            if (a.uid > b.uid) {
              return -1;
            }
            if (a.uid < b.uid) {
              return +1;
            }
            return 0;
          });
        }
        this.$el.empty();
        _.each(users, function(user) {
          return _this.$el.append(_this.template({
            user: user
          }));
        });
        return this;
      };

      return UserPresenceView;

    })(SharedView);
    TaskDescriptionView = (function(_super) {
      __extends(TaskDescriptionView, _super);

      function TaskDescriptionView() {
        _ref11 = TaskDescriptionView.__super__.constructor.apply(this, arguments);
        return _ref11;
      }

      TaskDescriptionView.prototype.tagName = 'div';

      TaskDescriptionView.prototype.className = 'task-desciption';

      TaskDescriptionView.prototype.initialize = function(options) {
        TaskDescriptionView.__super__.initialize.call(this, options);
        return this.model.on('change:question', this.render);
      };

      TaskDescriptionView.prototype.render = function() {
        this.$el.empty();
        if (this.model.get('question')) {
          this.$el.html(this.model.get('question'));
        } else {
          this.$el.html("<div><strong><center>No task has been added yet</center></strong></div>");
        }
        return this;
      };

      return TaskDescriptionView;

    })(SharedView);
    SharedTestCaseView = (function(_super) {
      __extends(SharedTestCaseView, _super);

      function SharedTestCaseView() {
        _ref12 = SharedTestCaseView.__super__.constructor.apply(this, arguments);
        return _ref12;
      }

      SharedTestCaseView.prototype.tagName = 'textarea';

      SharedTestCaseView.prototype.className = 'input-program';

      SharedTestCaseView.prototype.defaults = {
        timespan: 1500
      };

      SharedTestCaseView.prototype.events = {
        'focus': 'checkForChanges',
        'change': 'stopCheckingForChanges',
        'blur': 'stopCheckingForChanges'
      };

      SharedTestCaseView.prototype.initialize = function(options) {
        var _this = this;
        SharedTestCaseView.__super__.initialize.call(this, options);
        if (this.model.doc) {
          this.setDoc();
        }
        this.first = true;
        setTimeout(function() {
          return _this.first = false;
        }, 5000);
        this.model.on('change', this.setInput);
        $(this.el).attr('placeholder', 'Your code will be tested against the input.');
        $(this.el).addClass('bottom-text-area');
        return this.timespan = options.timespan;
      };

      SharedTestCaseView.prototype.updateChanges = function() {
        if (!_.isEqual(this.model.get('input'), this.$el.val())) {
          return this.model.set('input', this.$el.val());
        }
      };

      SharedTestCaseView.prototype.checkForChanges = function() {
        if (this.timer) {
          clearInterval(this.timer);
        }
        return this.timer = setInterval(this.updateChanges, this.timespan);
      };

      SharedTestCaseView.prototype.stopCheckingForChanges = function() {
        if (this.timer) {
          clearInterval(this.timer);
        }
        return this.updateChanges();
      };

      SharedTestCaseView.prototype.setDoc = function() {
        return this.setInput();
      };

      SharedTestCaseView.prototype.setInput = function() {
        if (this.$el.val() !== this.model.get('input')) {
          this.$el.val(this.model.get('input'));
          if (this.model.get('input')) {
            if (!this.first && $(this.el).parent().parent().hasClass('hidden') && this.model.get('index') === (app.qnum - 1)) {
              return $('li#tab-input-selector').addClass('notification');
            }
          }
        }
      };

      return SharedTestCaseView;

    })(SharedView);
    SharedConsoleView = (function(_super) {
      __extends(SharedConsoleView, _super);

      function SharedConsoleView() {
        _ref13 = SharedConsoleView.__super__.constructor.apply(this, arguments);
        return _ref13;
      }

      SharedConsoleView.prototype.tagName = 'pre';

      SharedConsoleView.prototype.className = 'bottom-pre';

      SharedConsoleView.prototype.initialize = function(options) {
        var _this = this;
        SharedConsoleView.__super__.initialize.call(this, options);
        if (this.model.doc) {
          this.setDoc();
        }
        this.first = true;
        setTimeout(function() {
          return _this.first = false;
        }, 5000);
        return this.model.on('change:runs', this.setConsole);
      };

      SharedConsoleView.prototype.sanitizeOutput = function(c, str) {
        var exp;
        str = str || '';
        exp = new RegExp('/' + c.hash + '/', 'g');
        return str.replace(exp, '');
      };

      SharedConsoleView.prototype.setDoc = function() {
        return this.setConsole();
      };

      SharedConsoleView.prototype.setConsole = function() {
        var c, last_run, runs;
        runs = this.model.get('runs');
        c = '';
        if (_.isArray(runs)) {
          last_run = _.last(runs);
          if (last_run.response) {
            c = last_run.response;
          }
        }
        if (_.isObject(c)) {
          if (c.result !== 0) {
            this.$el.text(this.sanitizeOutput(c, c.compilemessage)).addClass('error');
          } else {
            if (c.signal && c.signal[0] === 0 && c.stdout) {
              this.$el.text(c.stdout.join('')).removeClass('error');
            } else if (c.signal && (c.signal[0] === 62 || c.signal[0] === 24)) {
              this.$el.text('Time limit exceeded').addClass('error');
            } else if (c.signal && c.signal[0] === 25) {
              this.$el.text('Output size exceeded').addClass('error');
            } else if (c.stderr) {
              this.$el.text(this.sanitizeOutput(c, c.stderr.join(''))).addClass('error');
            }
          }
          if (!this.first && $(this.el).parent().parent().hasClass('hidden') && this.model.get('index') === (app.qnum - 1)) {
            return $('li#tab-output-selector').addClass('notification');
          }
        } else {
          return this.$el.text(c);
        }
      };

      return SharedConsoleView;

    })(SharedView);
    SharedFeedbackView = (function(_super) {
      __extends(SharedFeedbackView, _super);

      function SharedFeedbackView() {
        _ref14 = SharedFeedbackView.__super__.constructor.apply(this, arguments);
        return _ref14;
      }

      SharedFeedbackView.prototype.tagName = 'textarea';

      SharedFeedbackView.prototype.className = 'feedback';

      SharedFeedbackView.prototype.initialize = function(options) {
        SharedFeedbackView.__super__.initialize.call(this, options);
        if (this.model.doc) {
          this.setDoc();
        }
        $(this.el).addClass('bottom-text-area');
        return $(this.el).attr('placeholder', "Write your feedback here. Candidates won't see this.");
      };

      SharedFeedbackView.prototype.setDoc = function() {
        return this.model.doc.attach_textarea(this.$el.get(0));
      };

      return SharedFeedbackView;

    })(SharedView);
    SharedCodeEditorView = (function(_super) {
      __extends(SharedCodeEditorView, _super);

      function SharedCodeEditorView() {
        _ref15 = SharedCodeEditorView.__super__.constructor.apply(this, arguments);
        return _ref15;
      }

      SharedCodeEditorView.prototype.template = _.template($('#shared-code-editor-template').html());

      SharedCodeEditorView.prototype.events = function() {
        return {
          'click #compilerun': 'compileAndRun',
          'click .bottom-tab': 'changeTab',
          'click .js-collapse-bottom-container': 'collapseBottomContainer',
          'click .light-container-clickable': 'toggleLeftContainer'
        };
      };

      SharedCodeEditorView.prototype.setDoc = function() {};

      SharedCodeEditorView.prototype.compileAndRun = function(ev) {
        var _this = this;
        ev.preventDefault();
        if (this.timer) {
          clearTimeout(this.timer);
        }
        this.model.compile();
        return this.timer = setTimeout(function() {
          IS('util').ajaxmsg("Error occured while compiling. Please try again.", false, true, 1000);
          return _this.model.set('compiling', false);
        }, 15000);
      };

      SharedCodeEditorView.prototype.changeCompilingStatus = function() {
        if (this.model.get('index') !== (app.qnum - 1)) {
          return;
        }
        if (this.model.get('compiling')) {
          if (!$("#tab-feedback") || $("#tab-feedback").hasClass('hidden')) {
            $('.bottom-tab[data-tab=output]').click();
          }
          return this.$el.find('#compilerun').text('RUNNING');
        } else {
          this.$('#compilerun').text('RUN CODE');
          if (this.timer) {
            clearTimeout(this.timer);
            return this.timer = null;
          }
        }
      };

      SharedCodeEditorView.prototype.initialize = function(options) {
        SharedCodeEditorView.__super__.initialize.call(this, options);
        options = _.clone(options || {});
        options.property = 'language';
        this.select = new SharedSelectView(options);
        options = _.clone(options || {});
        this.testcases = new SharedTestCaseView(options);
        options = _.clone(options || {});
        this.console = new SharedConsoleView(options);
        if (app.Current.get('user').role === 'admin') {
          options = _.clone(options || {});
          options.collection = this.model.library;
          options.libraries = this.model.libraries;
          options.model = this.model;
          this.library = new InterviewerQuestionLibraryView(options);
          options = _.clone(options || {});
          options.model = this.model.feedback;
          this.feedback = new SharedFeedbackView(options);
          options = _.clone(options || {});
          options.model = this.model.interview;
          options.so = this.model;
          this.interview = new ResumeView(options);
        } else {
          options = _.clone(options || {});
          this.task_description = new TaskDescriptionView(options);
        }
        options = _.clone(options || {});
        options.model = this.model.editor;
        options.settings = this.model;
        options.cursor = this.model.cursor;
        this.editor = new SharedEditorView(options);
        options.model = this.model.scratch_pad;
        this.scratch_pad = new SharedScratchPadView(options);
        if (this.model.doc) {
          this.setDoc();
        }
        return this.model.on('change:compiling', this.changeCompilingStatus);
      };

      SharedCodeEditorView.prototype.render = function() {
        var _this = this;
        this.$el.html(this.template());
        this.$el.find('#editor').html(this.editor.render().$el);
        this.$el.find('#scratch-pad').html(this.scratch_pad.render().$el);
        this.$el.find('#language').append(this.select.render().$el);
        this.$el.find('#input-section').append(this.testcases.render().$el);
        this.$el.find('#output-section').append(this.console.render().$el);
        if (app.Current.get('user').role === 'admin') {
          this.$("#tab-feedback-selector").removeClass('hidden');
          this.$el.find('#interviewer-feedback').append(this.feedback.render().$el);
          this.$el.find('#interviewer-question-library-section').append(this.library.render().$el);
          this.$('#candidate-task-description-section').addClass('hidden');
          this.$('#interviewer-question-library-section').removeClass('hidden');
          this.interview.render();
        } else {
          this.$('#candidate-task-description').html(this.task_description.render().$el);
        }
        setTimeout(function() {
          var tour;
          tour = new Tour();
          tour.addSteps([
            {
              element: "#language",
              title: "Available Languages",
              content: "Choose the language in which you'll code.",
              placement: "bottom"
            }, {
              element: "#editor",
              title: "Code Editor",
              content: "Type your code directly into this area of your screen.",
              placement: "left"
            }, {
              element: "#tab-input-selector",
              title: "Input Field",
              content: "Enter the input against which to test your code.",
              placement: "top",
              orphan: true,
              onShow: function(tour) {
                return $(".bottom-tab[data-tab=input]").click();
              }
            }, {
              element: "#compilerun",
              title: "Compile and Test",
              content: "Run your code against your test case. ",
              placement: "left"
            }, {
              element: "#tab-output-selector",
              title: "Output Field",
              content: "Check the response from the code checker here.﻿",
              placement: "top",
              onShow: function(tour) {
                return $(".bottom-tab[data-tab=output]").click();
              }
            }
          ]);
          return tour.start();
        });
        return this;
      };

      SharedCodeEditorView.prototype.changeTab = function(e) {
        var line_num, new_tab, scratch_pad_line_num, tabs;
        e.preventDefault();
        tabs = ['input', 'output', 'feedback'];
        _.each(tabs, function(tab) {
          $('#tab-' + tab).addClass('hidden');
          return $('li#tab-' + tab + '-selector').removeClass('selected');
        });
        new_tab = $(e.currentTarget).data('tab');
        $('li#tab-' + new_tab + '-selector').addClass('selected');
        $('li#tab-' + new_tab + '-selector').removeClass('notification');
        $('.mid-container').css('bottom', '207px');
        app.editor.resize();
        app.scratch_pad_editor.resize();
        line_num = app.editor.getCursorPosition();
        setTimeout(function() {
          return app.editor.gotoLine(line_num['row'] + 1, line_num['column']);
        }, 20);
        scratch_pad_line_num = app.scratch_pad_editor.getCursorPosition();
        setTimeout(function() {
          return app.scratch_pad_editor.gotoLine(scratch_pad_line_num['row'] + 1, scratch_pad_line_num['column']);
        }, 20);
        $('.js-bottom-container').removeClass('collapsed').addClass('expanded');
        $('#tab-' + new_tab).removeClass('hidden');
        return $('.js-collapse-bottom-container').removeClass('hidden');
      };

      SharedCodeEditorView.prototype.collapseBottomContainer = function(e) {
        var line_num, scratch_pad_line_num, tabs;
        e.preventDefault();
        tabs = ['input', 'output', 'feedback'];
        _.each(tabs, function(tab) {
          $('#tab-' + tab).addClass('hidden');
          return $('li#tab-' + tab + '-selector').removeClass('selected');
        });
        $('.js-bottom-container').removeClass('expanded').addClass('collapsed');
        $('.mid-container').css('bottom', '45px');
        app.editor.resize();
        app.scratch_pad_editor.resize();
        line_num = app.editor.getCursorPosition();
        setTimeout(function() {
          return app.editor.gotoLine(line_num['row'] + 1, line_num['column']);
        }, 20);
        scratch_pad_line_num = app.scratch_pad_editor.getCursorPosition();
        setTimeout(function() {
          return app.scratch_pad_editor.gotoLine(scratch_pad_line_num['row'] + 1, scratch_pad_line_num['column']);
        }, 20);
        return $(e.currentTarget).addClass('hidden');
      };

      SharedCodeEditorView.prototype.toggleLeftContainer = function(e) {
        var action;
        e.preventDefault();
        action = $(e.currentTarget).data('action');
        if (action === 'collapse') {
          $('.left-container').css({
            'width': '4%',
            'min-width': 40
          });
          $('.mid-container-wrapper').css('width', '96%');
          $(e.currentTarget).parent().find('#collapsable-section').addClass('hidden');
          $(e.currentTarget).parent().find('.full-left-content').addClass('hidden');
          return $(e.currentTarget).parent().find("#collapsed-section").removeClass('hidden');
        } else {
          $('.left-container').css({
            'width': '20%',
            'min-width': 240
          });
          $('.mid-container-wrapper').css('width', '80%');
          $(e.currentTarget).parent().parent().find("#collapsed-section").addClass('hidden');
          $(e.currentTarget).parent().parent().find('#collapsable-section').removeClass('hidden');
          return $(e.currentTarget).parent().parent().find('.full-left-content').removeClass('hidden');
        }
      };

      return SharedCodeEditorView;

    })(SharedView);
    SharedSelectView = (function(_super) {
      __extends(SharedSelectView, _super);

      function SharedSelectView() {
        _ref16 = SharedSelectView.__super__.constructor.apply(this, arguments);
        return _ref16;
      }

      SharedSelectView.prototype.tagName = 'select';

      SharedSelectView.prototype.defaults = {
        property: 'language',
        options: {
          'c': 'C',
          'cpp': 'C++',
          'java': 'Java',
          'csharp': 'C#',
          'php': 'PHP',
          'ruby': 'Ruby',
          'python': 'Python',
          'perl': 'Perl',
          'haskell': 'Haskell',
          'clojure': 'Clojure',
          'scala': 'Scala',
          'javascript': 'Javascript',
          'objectivec': 'Objective C',
          'cobol': 'Cobol',
          'bash': 'Bash'
        }
      };

      SharedSelectView.prototype.events = {
        'change': 'onSelectChange'
      };

      SharedSelectView.prototype.onSelectChange = function(e) {
        var code, lang, saved_codes;
        saved_codes = this.model.get('saved_codes');
        lang = e.removed.id;
        saved_codes[lang] = this.model.editor.getValue();
        this.model.set(this.property, this.$el.val());
        if (saved_codes[this.$el.val()]) {
          code = saved_codes[this.$el.val()];
          return app.editor.setValue(code, code.length + 1);
        } else {
          code = app.Current.get('defaultLanguageTemplates')[this.$el.val()];
          return app.editor.setValue(code, code.length + 1);
        }
      };

      SharedSelectView.prototype.initialize = function(options) {
        SharedSelectView.__super__.initialize.call(this, options);
        this.options = options.options;
        this.property = options.property;
        return this.model.on('change:' + this.property, this.render);
      };

      SharedSelectView.prototype.render = function() {
        var _this = this;
        this.$el.empty();
        _.each(this.options, function(val, key) {
          var $opt;
          $opt = $('<option></option>');
          $opt.text(val);
          $opt.attr('value', key);
          return _this.$el.append($opt);
        });
        this.$el.val(this.model.get(this.property));
        setTimeout(function() {
          return $(_this.el).select2({
            width: 150
          });
        });
        return this;
      };

      SharedSelectView.prototype.destroy = function() {};

      return SharedSelectView;

    })(SharedView);
    SharedEditorView = (function(_super) {
      __extends(SharedEditorView, _super);

      function SharedEditorView() {
        _ref17 = SharedEditorView.__super__.constructor.apply(this, arguments);
        return _ref17;
      }

      SharedEditorView.prototype.defaults = {
        mappings: {
          'c': 'c_cpp',
          'cpp': 'c_cpp',
          'bash': 'sh'
        }
      };

      SharedEditorView.prototype.getMode = function(lang) {
        if (this.mappings && this.mappings[lang]) {
          return this.mappings[lang];
        }
        return lang;
      };

      SharedEditorView.prototype.initialize = function(options) {
        SharedEditorView.__super__.initialize.call(this, options);
        this.mappings = options.mappings;
        this.editor = ace.edit(this.$el.get(0));
        app.editor = this.editor;
        this.settings = options.settings;
        this.cursor = options.cursor;
        if (this.model.doc) {
          this.setDoc();
        }
        this.settings.on('change:theme', this.setTheme);
        this.settings.on('change:language', this.setMode);
        return this.cursor.on('change', this.showCursor);
      };

      SharedEditorView.prototype.destroy = function() {};

      SharedEditorView.prototype.onChange = function() {};

      SharedEditorView.prototype.onRemoteChange = function() {
        return SharedEditorView.__super__.onRemoteChange.apply(this, arguments);
      };

      SharedEditorView.prototype.setDoc = function() {
        var _this = this;
        this.model.doc.attach_ace(this.editor);
        this.setTheme();
        this.setMode();
        return setTimeout(function() {
          _this.setCursor();
          _this.showCursor();
          _this.editor.getSession().getSelection().on('changeSelection', _this.onCursorChange);
          return _this.editor.getSession().getSelection().on('changeCursor', _this.onCursorChange);
        });
      };

      SharedEditorView.prototype.onCursorChange = function() {
        var color, pos, sel;
        sel = this.editor.getSession().getSelection();
        pos = sel.getRange();
        color = this.cursor.getNext();
        if (_.isEqual(pos.start, pos.end)) {
          return this.cursor.set(color, {
            selected: false,
            row: sel.getCursor().row,
            col: sel.getCursor().column
          });
        } else {
          return this.cursor.set(color, {
            selected: true,
            sr: pos.start.row,
            sc: pos.start.column,
            er: pos.end.row,
            ec: pos.end.column
          });
        }
      };

      SharedEditorView.prototype.setCursor = function() {
        var color, pos;
        color = this.cursor.getNext();
        pos = this.cursor.get(color);
        if (!pos) {
          return this.cursor.set(color, {
            selected: false,
            row: 0,
            col: 0
          });
        } else {
          if (pos.selected) {
            return this.editor.addSelection(new Range(pos.sr, pos.sc, pos.er, pos.ec));
          } else {
            return this.editor.moveCursorTo(pos.row, pos.col);
          }
        }
      };

      SharedEditorView.prototype.showCursor = function() {
        var arr, session,
          _this = this;
        arr = _.pluck(app.users.get("onlineUsers"), 'color');
        session = this.editor.getSession();
        _.each(session.getMarkers(false), function(o, id) {
          if (o.clazz.match(/user\-cursor/ig)) {
            return session.removeMarker(id);
          }
        });
        return _.each(arr, function(key) {
          var def;
          if (key === _this.cursor.current) {
            return;
          }
          def = _.defaults(_.clone(_this.cursor.get(key) || {}), {
            selected: false,
            row: 0,
            col: 0
          });
          if (def.selected) {
            return session.addMarker(new Range(def.sr, def.sc, def.er, def.ec), 'user-cursor user-cursor-' + key, 'string', false);
          } else {
            return session.addMarker(new Range(def.row, def.col, def.row, def.col + 1), 'user-cursor user-cursor-' + key, 'string', false);
          }
        });
      };

      SharedEditorView.prototype.setTheme = function() {
        if (this.settings.get('theme')) {
          return this.editor.setTheme('ace/theme/' + this.settings.get('theme'));
        } else {
          return this.editor.setTheme('ace/theme/tomorrow_night');
        }
      };

      SharedEditorView.prototype.setMode = function() {
        return this.editor.getSession().setMode('ace/mode/' + this.getMode(this.settings.get('language') || 'cpp'));
      };

      SharedEditorView.prototype.render = function() {
        return this;
      };

      return SharedEditorView;

    })(SharedView);
    SharedScratchPadView = (function(_super) {
      __extends(SharedScratchPadView, _super);

      function SharedScratchPadView() {
        _ref18 = SharedScratchPadView.__super__.constructor.apply(this, arguments);
        return _ref18;
      }

      SharedScratchPadView.prototype.initialize = function(options) {
        SharedScratchPadView.__super__.initialize.call(this, options);
        this.editor = ace.edit(this.$el.get(0));
        app.scratch_pad_editor = this.editor;
        this.settings = options.settings;
        this.cursor = options.cursor;
        if (this.model.doc) {
          this.setDoc();
        }
        this.settings.on('change:theme', this.setTheme);
        return this.cursor.on('change', this.showCursor);
      };

      SharedScratchPadView.prototype.setDoc = function() {
        var _this = this;
        this.model.doc.attach_ace(this.editor);
        this.setTheme();
        this.setMode();
        return setTimeout(function() {
          _this.setCursor();
          _this.showCursor();
          _this.editor.getSession().getSelection().on('changeSelection', _this.onCursorChange);
          return _this.editor.getSession().getSelection().on('changeCursor', _this.onCursorChange);
        });
      };

      SharedScratchPadView.prototype.onCursorChange = function() {
        var color, pos, sel;
        sel = this.editor.getSession().getSelection();
        pos = sel.getRange();
        color = this.cursor.getNext();
        if (_.isEqual(pos.start, pos.end)) {
          return this.cursor.set(color, {
            selected: false,
            row: sel.getCursor().row,
            col: sel.getCursor().column
          });
        } else {
          return this.cursor.set(color, {
            selected: true,
            sr: pos.start.row,
            sc: pos.start.column,
            er: pos.end.row,
            ec: pos.end.column
          });
        }
      };

      SharedScratchPadView.prototype.setCursor = function() {
        var color, pos;
        color = this.cursor.getNext();
        pos = this.cursor.get(color);
        if (!pos) {
          return this.cursor.set(color, {
            selected: false,
            row: 0,
            col: 0
          });
        } else {
          if (pos.selected) {
            return this.editor.addSelection(new Range(pos.sr, pos.sc, pos.er, pos.ec));
          } else {
            return this.editor.moveCursorTo(pos.row, pos.col);
          }
        }
      };

      SharedScratchPadView.prototype.showCursor = function() {
        var arr, session,
          _this = this;
        arr = _.pluck(this.settings.get('users'), 'color');
        session = this.editor.getSession();
        _.each(session.getMarkers(false), function(o, id) {
          if (o.clazz.match(/user\-cursor/ig)) {
            return session.removeMarker(id);
          }
        });
        return _.each(arr, function(key) {
          var def;
          if (key === _this.cursor.current) {
            return;
          }
          def = _.defaults(_.clone(_this.cursor.get(key) || {}), {
            selected: false,
            row: 0,
            col: 0
          });
          if (def.selected) {
            return session.addMarker(new Range(def.sr, def.sc, def.er, def.ec), 'user-cursor user-cursor-' + key, 'string', false);
          } else {
            return session.addMarker(new Range(def.row, def.col, def.row, def.col + 1), 'user-cursor user-cursor-' + key, 'string', false);
          }
        });
      };

      SharedScratchPadView.prototype.setTheme = function() {
        if (this.settings.get('theme')) {
          return this.editor.setTheme('ace/theme/' + this.settings.get('theme'));
        } else {
          return this.editor.setTheme('ace/theme/tomorrow_night');
        }
      };

      SharedScratchPadView.prototype.setMode = function() {
        return this.editor.getSession().setMode('');
      };

      SharedScratchPadView.prototype.render = function() {
        return this;
      };

      return SharedScratchPadView;

    })(SharedView);
    ContentView = (function(_super) {
      __extends(ContentView, _super);

      function ContentView() {
        _ref19 = ContentView.__super__.constructor.apply(this, arguments);
        return _ref19;
      }

      ContentView.prototype.tagName = "div";

      ContentView.prototype.className = "content";

      ContentView.prototype.initialize = function(options) {
        ContentView.__super__.initialize.call(this, options);
        return this.sharededitor = new SharedCodeEditorView({
          model: this.model
        });
      };

      ContentView.prototype.render = function() {
        $(this.el).empty();
        this.$el.append(this.sharededitor.render().$el);
        return this;
      };

      return ContentView;

    })(GenericView);
    FooterView = (function(_super) {
      __extends(FooterView, _super);

      function FooterView() {
        _ref20 = FooterView.__super__.constructor.apply(this, arguments);
        return _ref20;
      }

      FooterView.prototype.template = _.template($("#footer-template").html());

      FooterView.prototype.tagName = "div";

      FooterView.prototype.className = "footer";

      FooterView.prototype.initialize = function(options) {};

      FooterView.prototype.render = function() {
        $(this.el).html(this.template);
        return this;
      };

      FooterView.prototype.setFooterMessage = function(value, event) {
        if (event === 'change' || event === 'delete') {
          if (value === '' || value === 'False' || value === void 0) {
            return this.$('#StatusBar').html('');
          } else {
            return this.$('#StatusBar').html(value);
          }
        }
      };

      return FooterView;

    })(Backbone.View);
    CandidateLoginModalView = (function(_super) {
      __extends(CandidateLoginModalView, _super);

      function CandidateLoginModalView() {
        _ref21 = CandidateLoginModalView.__super__.constructor.apply(this, arguments);
        return _ref21;
      }

      CandidateLoginModalView.prototype.template = _.template($('#candidate-login-modal-template').html());

      CandidateLoginModalView.prototype.render = function() {
        var savedUser;
        this.$el.html(this.template);
        this.$('.modal').modal();
        if (!!IS.util.objCookie("currentUser")) {
          savedUser = IS.util.objCookie("currentUser");
          $("input[name=candidate-name]").val(savedUser.name);
        }
        $("input[name=candidate-name]").focus();
        return this;
      };

      CandidateLoginModalView.prototype.events = function() {
        return {
          "submit form[name=candidate-login-form]": "candidateLogin"
        };
      };

      CandidateLoginModalView.prototype.candidateLogin = function(e) {
        var name;
        e.preventDefault();
        name = $("input[name=candidate-name]").val();
        if (name) {
          app.q.name = name;
          app.q.id = app.q.name.replace(' ', '');
          app.q.role = 'user';
          this.$('.close').click();
          return app.start();
        } else {
          return $("input[name=candidate-name]").focus();
        }
      };

      return CandidateLoginModalView;

    })(GenericView);
    InterviewerLoginModalView = (function(_super) {
      __extends(InterviewerLoginModalView, _super);

      function InterviewerLoginModalView() {
        _ref22 = InterviewerLoginModalView.__super__.constructor.apply(this, arguments);
        return _ref22;
      }

      InterviewerLoginModalView.prototype.template = _.template($('#interviewer-login-modal-template').html());

      InterviewerLoginModalView.prototype.render = function() {
        this.$el.html(this.template);
        this.$('.modal').modal();
        $("input[name=interviewer-name]").focus();
        return this;
      };

      InterviewerLoginModalView.prototype.events = function() {
        return {
          "submit form[name=interviewer-login-form]": "interviewerLogin"
        };
      };

      InterviewerLoginModalView.prototype.interviewerLogin = function(e) {
        var access_code, name, slug,
          _this = this;
        e.preventDefault();
        name = $("input[name=interviewer-name]").val();
        access_code = $.trim($("input[name=interviewer-access-code]").val());
        if (name) {
          this.$(".alert-error").addClass('hidden');
          slug = window.location.pathname.split('/').pop();
          return $.post("/paper/" + slug + "/authenticate/", {
            attendant: IS.getParameters().b,
            password: access_code
          }, function(data) {
            if (data.status === 'Success') {
              _this.$('.close').click();
              app.password = access_code;
              app.q.role = 'admin';
              app.q.name = name;
              return app.start();
            } else {
              return _this.$(".alert-error").removeClass('hidden');
              /*
              app.q.role = 'user'
              app.q.name = name
              app.start()
              */

            }
          }, "json");
        } else {
          return $("input[name=interviewer-name]").focus();
        }
      };

      return InterviewerLoginModalView;

    })(GenericView);
    LoginModalView = (function(_super) {
      __extends(LoginModalView, _super);

      function LoginModalView() {
        _ref23 = LoginModalView.__super__.constructor.apply(this, arguments);
        return _ref23;
      }

      LoginModalView.prototype.template = _.template($("#login-modal-template").html());

      LoginModalView.prototype.render = function() {
        var styles, width;
        this.$el.html(this.template);
        width = this.$('.login-modal').attr('data-width');
        styles = {
          width: width,
          'margin-left': -(parseInt(width) / 2)
        };
        this.$('.login-modal').modal().css(styles);
        return this;
      };

      LoginModalView.prototype.events = function() {
        return {
          'submit form[name=candidate-login-form]': 'candidateLogin',
          'submit form[name=interviewer-login-form]': 'interviewerLogin'
        };
      };

      LoginModalView.prototype.interviewerLogin = function(e) {
        var access_code, name, slug,
          _this = this;
        e.preventDefault();
        name = $("input[name=interviewer-name]").val();
        access_code = $.trim($("input[name=interviewer-access-code]").val());
        if (name) {
          this.$(".error").addClass('hidden');
          slug = window.location.pathname.split('/').pop();
          return $.post("/paper/" + slug + "/authenticate/", {
            attendant: IS.getParameters().b,
            password: access_code
          }, function(data) {
            if (data.status === 'Success') {
              _this.$('.close').click();
              app.password = access_code;
              app.q.role = 'admin';
              app.q.name = name;
              return app.start();
            } else {
              return _this.$(".error").removeClass('hidden');
              /*
              app.q.role = 'user'
              app.q.name = name
              app.start()
              */

            }
          }, "json");
        } else {
          return $("input[name=interviewer-name]").focus();
        }
      };

      LoginModalView.prototype.candidateLogin = function(e) {
        var name;
        e.preventDefault();
        name = $("input[name=candidate-name]").val();
        if (name) {
          app.q.name = name;
          app.q.id = app.q.name.replace(' ', '');
          app.q.role = 'user';
          this.$('.close').click();
          return app.start();
        } else {
          return $("input[name=candidate-name]").focus();
        }
      };

      return LoginModalView;

    })(GenericView);
    app.ApplicationView = ApplicationView;
    app.InterviewerLoginModalView = InterviewerLoginModalView;
    app.CandidateLoginModalView = CandidateLoginModalView;
    return app.LoginModalView = LoginModalView;
  });

}).call(this);
