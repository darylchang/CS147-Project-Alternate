<!doctype html>

<html>
<head>
	<title>Delp Project Portfolio</title>	
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<link href="/css/metro-bootstrap.css" rel="stylesheet">
	<link href="/css/introHCI.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/jquery.sidr.dark.css">
    <script src="/js/jquery.min.js"></script>
    <script src="/js/jquery.sidr.min.js"></script>
    <script src="/js/bootstrap.min.js"></script>

    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
      <script src="https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js"></script>
    <![endif]-->        
</head>

<body class="metro">

	{{>navMenu}}	
  <div class="panel">
    <div class="panel-header bg-darkRed fg-white"> 
      <h3 float="left" class="fg-white">
          <button id="back"  type="submit" onclick="window.location.href='{{lastPage}}'" class="bg-darkRed">
              <i class="icon-arrow-left fg-white"></i>
          </button>
          Dining Hall Map
      </h3>
    </div>
  </div>


	<div class="container">
		<div class="row">
			<div class="col-lg-12">
				<div id="map-canvas" style='height:500px;margin-bottom:20px;'></div>
			</div>
		</div>
	</div>

	<script src="https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false&callback=initialize"></script>
	<script>
        /* Script to handle Google Map displaying dining halls
         * See documentation at:
         * https://developers.google.com/maps/documentation/javascript/markers
         * Labeled markers library: http://stackoverflow.com/questions/11043587/google-maps-api-v3-marker-with-label
         */

        var map; // google.maps.Map object set to use the 'map-canvas' div
        var markers; // Hash of arrays of markers to display on map
        var imageDirectory = "../images/"; // Image directory in a node project
        var markerDimensions = 30; // Width/height of icons (assumed square TODO)
        var zIndex = 0; // incremented to control drawing order

        var markerData = [
            {{#each halls}}
                {"name":"{{name}}", "latitude":{{latitude}}, "longitude":{{longitude}} },
            {{/each}}
            {"name":"Fake", "latitude":50.0, "longitude":123.0}
          // {"name": "Arrillaga Family Dining Commons", "latitude": 37.425448, "longitude": -122.164251},
          // {"name": "Ricker Dining", "latitude": 37.425604, "longitude": -122.180428}
        ];
        markerData.pop();
        var defaultIconFilename = "dining.png";

        // Initialize Google map in the div marked as 'map-canvas'
        function initialize() {
          var centerLatLng = new google.maps.LatLng(37.427449, -122.170308); // Stanford quad
          var mapOptions = {
            zoom: 15,
            center: centerLatLng,
            mapTypeId: google.maps.MapTypeId.ROADMAP
          };
          markers = [];

          // Try W3C geolocation
          /*
          if(navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function(position) {
              initialLocation = new google.maps.LatLng(position.coords.latitude,position.coords.longitude);
              mapOptions['center'] = initialLocation;
            }, function() {} );
          }
          */
          
          map = new google.maps.Map(document.getElementById('map-canvas'),
                                        mapOptions);
          loadMarkerData();
        }

        function loadMarkerData() {
          for(var i = 0; i < markerData.length; i++) {
            var currMarker = markerData[i];
            var marker = newMarker(currMarker.name, currMarker["latitude"], currMarker["longitude"]);
            markers.push(marker);
          }
        }

        function newMarker(name, lat, lng) {
          var icon = {
            url: imageDirectory + defaultIconFilename,
            scaledSize: new google.maps.Size(30, 30)
          };
          var myLatLng = new google.maps.LatLng(lat, lng);

          // Set information window
          var infowindow = new google.maps.InfoWindow({
              content: name
          });

          // Create marker (adds to map)
          var marker = new google.maps.Marker({
                position: myLatLng,
                map: map,
                //icon: icon, // Image marker on map.
                title: name,
                zIndex: zIndex
          });
          google.maps.event.addListener(marker, 'click', function() {
            infowindow.open(map,marker);
          });
          zIndex++;
          return marker;
        }
        // Can change visibility of marker with marker.setVisible(true/false), eg if dining hall is closed


        // Implementation of Haversine formula. Returns distance between two points in miles.
        function distanceBetween(latLng1, latLng2) {
          return distanceBetweenCoords(latLng1[0], latLng1[1], latLng2[0], latLng2[1]);
        }
        function distanceBetweenCoords(lat1, long1, lat2, long2) {
          var dtor = Math.PI/180; var r = 3959.0; // Radius in miles
          var rlat1 = lat1 * dtor; var rlong1 = long1 * dtor;
          var rlat2 = lat2 * dtor; var rlong2 = long2 * dtor;
          var dlon = rlong1 - rlong2; var dlat = rlat1 - rlat2;
          var a = Math.pow(Math.sin(dlat/2),2) + Math.cos(rlat1) * Math.cos(rlat2) * Math.pow(Math.sin(dlon/2),2);
          var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
          var d = r * c; return d;
        }
    </script>
</body>
</html>
